Contract FeeCollectorFactoryImpl(
  feeCollectorPerTokenPairTemplateId: ByteVec,
  tokenPairFactory: TokenPairFactory
) extends Constants() implements FeeCollectorFactory {
  @using(preapprovedAssets = true)
  pub fn createFeeCollector(caller: Address, alphAmount: U256, tokenPairId: ByteVec) -> ByteVec {
    checkCaller!(callerContractId!() == contractId!(tokenPairFactory), ErrorCodes.InvalidCaller)
    let (encodedImmFields, encodedMutFields) = FeeCollectorPerTokenPairImpl.encodeFields!(tokenPairFactory, tokenPairId)
    return copyCreateSubContract!{caller -> ALPH: alphAmount}(
      tokenPairId,
      feeCollectorPerTokenPairTemplateId,
      encodedImmFields,
      encodedMutFields
    )
  }
}