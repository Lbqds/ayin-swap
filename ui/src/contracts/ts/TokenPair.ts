/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenPairContractJson } from "../dex/token_pair.ral.json";

// Custom types for the contract
export namespace TokenPairTypes {
  export type Fields = {
    token0Id: HexString;
    token1Id: HexString;
    reserve0: bigint;
    reserve1: bigint;
    blockTimeStampLast: bigint;
    price0CumulativeLast: bigint;
    price1CumulativeLast: bigint;
    totalSupply: bigint;
  };

  export type State = ContractState<Fields>;

  export type MintEvent = ContractEvent<{
    sender: HexString;
    amount0: bigint;
    amount1: bigint;
    liquidity: bigint;
  }>;
  export type BurnEvent = ContractEvent<{
    sender: HexString;
    amount0: bigint;
    amount1: bigint;
    liquidity: bigint;
  }>;
  export type SwapEvent = ContractEvent<{
    sender: HexString;
    tokenInId: HexString;
    amountIn: bigint;
    amountOut: bigint;
  }>;
}

class Factory extends ContractFactory<
  TokenPairInstance,
  TokenPairTypes.Fields
> {
  at(address: string): TokenPairInstance {
    return new TokenPairInstance(address);
  }

  async testGetSymbolMethod(
    params: Omit<TestContractParams<TokenPairTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "getSymbol", params);
  }

  async testGetNameMethod(
    params: Omit<TestContractParams<TokenPairTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "getName", params);
  }

  async testGetDecimalsMethod(
    params: Omit<TestContractParams<TokenPairTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "getDecimals", params);
  }

  async testGetTotalSupplyMethod(
    params: Omit<TestContractParams<TokenPairTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "getTotalSupply", params);
  }

  async testUqdivMethod(
    params: TestContractParams<TokenPairTypes.Fields, { a: bigint; b: bigint }>
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "uqdiv", params);
  }

  async testSqrtMethod(
    params: TestContractParams<TokenPairTypes.Fields, { y: bigint }>
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "sqrt", params);
  }

  async testGetTokenPairMethod(
    params: Omit<TestContractParams<TokenPairTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<[HexString, HexString]>> {
    return testMethod(this, "getTokenPair", params);
  }

  async testGetReservesMethod(
    params: Omit<TestContractParams<TokenPairTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<[bigint, bigint]>> {
    return testMethod(this, "getReserves", params);
  }

  async testUpdateMethod(
    params: TestContractParams<
      TokenPairTypes.Fields,
      { newReserve0: bigint; newReserve1: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "update", params);
  }

  async testMintMethod(
    params: TestContractParams<
      TokenPairTypes.Fields,
      { sender: HexString; amount0: bigint; amount1: bigint }
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "mint", params);
  }

  async testBurnMethod(
    params: TestContractParams<
      TokenPairTypes.Fields,
      { sender: HexString; liquidity: bigint }
    >
  ): Promise<TestContractResult<[bigint, bigint]>> {
    return testMethod(this, "burn", params);
  }

  async testSwapMethod(
    params: TestContractParams<
      TokenPairTypes.Fields,
      {
        sender: HexString;
        tokenInId: HexString;
        amountIn: bigint;
        amountOut: bigint;
      }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "swap", params);
  }
}

// Use this object to test and deploy the contract
export const TokenPair = new Factory(
  Contract.fromJson(
    TokenPairContractJson,
    "",
    "40cd786ad351defdb0153bcd578d47ac4d091f1127671155206792b638a4bc37"
  )
);

// Use this class to interact with the blockchain
export class TokenPairInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenPairTypes.State> {
    return fetchContractState(TokenPair, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeMintEvent(
    options: SubscribeOptions<TokenPairTypes.MintEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenPair.contract,
      this,
      options,
      "Mint",
      fromCount
    );
  }

  subscribeBurnEvent(
    options: SubscribeOptions<TokenPairTypes.BurnEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenPair.contract,
      this,
      options,
      "Burn",
      fromCount
    );
  }

  subscribeSwapEvent(
    options: SubscribeOptions<TokenPairTypes.SwapEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenPair.contract,
      this,
      options,
      "Swap",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      | TokenPairTypes.MintEvent
      | TokenPairTypes.BurnEvent
      | TokenPairTypes.SwapEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      TokenPair.contract,
      this,
      options,
      fromCount
    );
  }

  async callGetSymbolMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<HexString>> {
    return callMethod(
      TokenPair,
      this,
      "getSymbol",
      params === undefined ? {} : params
    );
  }

  async callGetNameMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<HexString>> {
    return callMethod(
      TokenPair,
      this,
      "getName",
      params === undefined ? {} : params
    );
  }

  async callGetDecimalsMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<bigint>> {
    return callMethod(
      TokenPair,
      this,
      "getDecimals",
      params === undefined ? {} : params
    );
  }

  async callGetTotalSupplyMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<bigint>> {
    return callMethod(
      TokenPair,
      this,
      "getTotalSupply",
      params === undefined ? {} : params
    );
  }

  async callUqdivMethod(
    params: CallContractParams<{ a: bigint; b: bigint }>
  ): Promise<CallContractResult<bigint>> {
    return callMethod(TokenPair, this, "uqdiv", params);
  }

  async callSqrtMethod(
    params: CallContractParams<{ y: bigint }>
  ): Promise<CallContractResult<bigint>> {
    return callMethod(TokenPair, this, "sqrt", params);
  }

  async callGetTokenPairMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<[HexString, HexString]>> {
    return callMethod(
      TokenPair,
      this,
      "getTokenPair",
      params === undefined ? {} : params
    );
  }

  async callGetReservesMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<[bigint, bigint]>> {
    return callMethod(
      TokenPair,
      this,
      "getReserves",
      params === undefined ? {} : params
    );
  }

  async callMintMethod(
    params: CallContractParams<{
      sender: HexString;
      amount0: bigint;
      amount1: bigint;
    }>
  ): Promise<CallContractResult<bigint>> {
    return callMethod(TokenPair, this, "mint", params);
  }

  async callBurnMethod(
    params: CallContractParams<{ sender: HexString; liquidity: bigint }>
  ): Promise<CallContractResult<[bigint, bigint]>> {
    return callMethod(TokenPair, this, "burn", params);
  }
}
