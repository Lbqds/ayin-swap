/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenPairFactoryContractJson } from "../dex/token_pair_factory.ral.json";

// Custom types for the contract
export namespace TokenPairFactoryTypes {
  export type Fields = {
    pairTemplateId: HexString;
    admin: HexString;
    maxSlippage: bigint;
    pairSize: bigint;
  };

  export type State = ContractState<Fields>;

  export type PairCreatedEvent = ContractEvent<{
    token0: HexString;
    token1: HexString;
    pair: HexString;
    currentPairSize: bigint;
  }>;
}

class Factory extends ContractFactory<
  TokenPairFactoryInstance,
  TokenPairFactoryTypes.Fields
> {
  at(address: string): TokenPairFactoryInstance {
    return new TokenPairFactoryInstance(address);
  }

  async testSortTokensMethod(
    params: TestContractParams<
      TokenPairFactoryTypes.Fields,
      { tokenA: HexString; tokenB: HexString }
    >
  ): Promise<TestContractResult<[HexString, HexString]>> {
    return testMethod(this, "sortTokens", params);
  }

  async testCreatePairMethod(
    params: TestContractParams<
      TokenPairFactoryTypes.Fields,
      {
        payer: HexString;
        alphAmount: bigint;
        tokenAId: HexString;
        tokenBId: HexString;
      }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "createPair", params);
  }

  async testUpdateMaxSlippageMethod(
    params: TestContractParams<
      TokenPairFactoryTypes.Fields,
      { newMaxSlippage: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updateMaxSlippage", params);
  }

  async testGetMaxSlippageMethod(
    params: Omit<
      TestContractParams<TokenPairFactoryTypes.Fields, never>,
      "testArgs"
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "getMaxSlippage", params);
  }
}

// Use this object to test and deploy the contract
export const TokenPairFactory = new Factory(
  Contract.fromJson(
    TokenPairFactoryContractJson,
    "",
    "a103d726989c707bc999b59928da45ed6fa42d25f67b6f5f4f073b6e9bfcd5df"
  )
);

// Use this class to interact with the blockchain
export class TokenPairFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenPairFactoryTypes.State> {
    return fetchContractState(TokenPairFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribePairCreatedEvent(
    options: SubscribeOptions<TokenPairFactoryTypes.PairCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenPairFactory.contract,
      this,
      options,
      "PairCreated",
      fromCount
    );
  }

  async callGetMaxSlippageMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<bigint>> {
    return callMethod(
      TokenPairFactory,
      this,
      "getMaxSlippage",
      params === undefined ? {} : params
    );
  }
}
