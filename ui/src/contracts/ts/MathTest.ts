/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as MathTestContractJson } from "../test/math_test.ral.json";

// Custom types for the contract
export namespace MathTestTypes {
  export type State = Omit<ContractState<any>, "fields">;
}

class Factory extends ContractFactory<MathTestInstance, {}> {
  at(address: string): MathTestInstance {
    return new MathTestInstance(address);
  }

  async testUqdivMethod(
    params: Omit<
      TestContractParams<never, { a: bigint; b: bigint }>,
      "initialFields"
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "uqdiv", params);
  }

  async testSqrtMethod(
    params: Omit<TestContractParams<never, { y: bigint }>, "initialFields">
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "sqrt", params);
  }
}

// Use this object to test and deploy the contract
export const MathTest = new Factory(
  Contract.fromJson(
    MathTestContractJson,
    "",
    "085c8183210ec7296681e12ab74e37bebee9d495e78e24cc9b3cd1b110d6df2a"
  )
);

// Use this class to interact with the blockchain
export class MathTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MathTestTypes.State> {
    return fetchContractState(MathTest, this);
  }

  async callUqdivMethod(
    params: CallContractParams<{ a: bigint; b: bigint }>
  ): Promise<CallContractResult<bigint>> {
    return callMethod(MathTest, this, "uqdiv", params);
  }

  async callSqrtMethod(
    params: CallContractParams<{ y: bigint }>
  ): Promise<CallContractResult<bigint>> {
    return callMethod(MathTest, this, "sqrt", params);
  }
}
