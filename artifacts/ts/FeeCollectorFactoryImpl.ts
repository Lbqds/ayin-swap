/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as FeeCollectorFactoryImplContractJson } from "../examples/fee_collector_factory_impl.ral.json";

// Custom types for the contract
export namespace FeeCollectorFactoryImplTypes {
  export type Fields = {
    feeCollectorTemplateId: HexString;
    feeCollectorSetter: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getFeeCollectorSetter: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    createFeeCollector: {
      params: CallContractParams<{
        caller: Address;
        alphAmount: bigint;
        tokenPairId: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  FeeCollectorFactoryImplInstance,
  FeeCollectorFactoryImplTypes.Fields
> {
  at(address: string): FeeCollectorFactoryImplInstance {
    return new FeeCollectorFactoryImplInstance(address);
  }

  tests = {
    getFeeCollectorSetter: async (
      params: Omit<
        TestContractParams<FeeCollectorFactoryImplTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getFeeCollectorSetter", params);
    },
    createFeeCollector: async (
      params: TestContractParams<
        FeeCollectorFactoryImplTypes.Fields,
        { caller: Address; alphAmount: bigint; tokenPairId: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "createFeeCollector", params);
    },
    updateSetter: async (
      params: TestContractParams<
        FeeCollectorFactoryImplTypes.Fields,
        { newFeeCollectorSetter: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateSetter", params);
    },
  };
}

// Use this object to test and deploy the contract
export const FeeCollectorFactoryImpl = new Factory(
  Contract.fromJson(
    FeeCollectorFactoryImplContractJson,
    "",
    "81412ef3504d8d7cda5c160b71d2cad0f4bdade7db17c327f5388812c955fc23"
  )
);

// Use this class to interact with the blockchain
export class FeeCollectorFactoryImplInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FeeCollectorFactoryImplTypes.State> {
    return fetchContractState(FeeCollectorFactoryImpl, this);
  }

  methods = {
    getFeeCollectorSetter: async (
      params?: FeeCollectorFactoryImplTypes.CallMethodParams<"getFeeCollectorSetter">
    ): Promise<
      FeeCollectorFactoryImplTypes.CallMethodResult<"getFeeCollectorSetter">
    > => {
      return callMethod(
        FeeCollectorFactoryImpl,
        this,
        "getFeeCollectorSetter",
        params === undefined ? {} : params
      );
    },
    createFeeCollector: async (
      params: FeeCollectorFactoryImplTypes.CallMethodParams<"createFeeCollector">
    ): Promise<
      FeeCollectorFactoryImplTypes.CallMethodResult<"createFeeCollector">
    > => {
      return callMethod(
        FeeCollectorFactoryImpl,
        this,
        "createFeeCollector",
        params
      );
    },
  };

  async multicall<Calls extends FeeCollectorFactoryImplTypes.MultiCallParams>(
    calls: Calls
  ): Promise<FeeCollectorFactoryImplTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      FeeCollectorFactoryImpl,
      this,
      calls
    )) as FeeCollectorFactoryImplTypes.MultiCallResults<Calls>;
  }
}
