/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as VestingScheduleFactoryContractJson } from "../dex/vesting_schedule_factory.ral.json";

// Custom types for the contract
export namespace VestingScheduleFactoryTypes {
  export type Fields = {
    vestingScheduleTemplateId: HexString;
  };

  export type State = ContractState<Fields>;

  export type VestingScheduleCreatedEvent = ContractEvent<{
    schedule: HexString;
    token: HexString;
    beneiciary: Address;
    amount: bigint;
    start: bigint;
    duration: bigint;
  }>;

  export interface CallMethodTable {
    uqdiv: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<bigint>;
    };
    sqrt: {
      params: CallContractParams<{ y: bigint }>;
      result: CallContractResult<bigint>;
    };
    getVestingScheduleByAddress: {
      params: CallContractParams<{ address: Address }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  VestingScheduleFactoryInstance,
  VestingScheduleFactoryTypes.Fields
> {
  at(address: string): VestingScheduleFactoryInstance {
    return new VestingScheduleFactoryInstance(address);
  }

  tests = {
    uqdiv: async (
      params: TestContractParams<
        VestingScheduleFactoryTypes.Fields,
        { a: bigint; b: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "uqdiv", params);
    },
    sqrt: async (
      params: TestContractParams<
        VestingScheduleFactoryTypes.Fields,
        { y: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "sqrt", params);
    },
    createSchedule: async (
      params: TestContractParams<
        VestingScheduleFactoryTypes.Fields,
        {
          payer: Address;
          tokenId: HexString;
          amount: bigint;
          beneficiary: Address;
          duration: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createSchedule", params);
    },
    getVestingScheduleByAddress: async (
      params: TestContractParams<
        VestingScheduleFactoryTypes.Fields,
        { address: Address }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getVestingScheduleByAddress", params);
    },
  };
}

// Use this object to test and deploy the contract
export const VestingScheduleFactory = new Factory(
  Contract.fromJson(
    VestingScheduleFactoryContractJson,
    "",
    "edc1387c5925d269d5f7cf36a016529b7505d02984115e01258719ed52fc0672"
  )
);

// Use this class to interact with the blockchain
export class VestingScheduleFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<VestingScheduleFactoryTypes.State> {
    return fetchContractState(VestingScheduleFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeVestingScheduleCreatedEvent(
    options: SubscribeOptions<VestingScheduleFactoryTypes.VestingScheduleCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      VestingScheduleFactory.contract,
      this,
      options,
      "VestingScheduleCreated",
      fromCount
    );
  }

  methods = {
    uqdiv: async (
      params: VestingScheduleFactoryTypes.CallMethodParams<"uqdiv">
    ): Promise<VestingScheduleFactoryTypes.CallMethodResult<"uqdiv">> => {
      return callMethod(VestingScheduleFactory, this, "uqdiv", params);
    },
    sqrt: async (
      params: VestingScheduleFactoryTypes.CallMethodParams<"sqrt">
    ): Promise<VestingScheduleFactoryTypes.CallMethodResult<"sqrt">> => {
      return callMethod(VestingScheduleFactory, this, "sqrt", params);
    },
    getVestingScheduleByAddress: async (
      params: VestingScheduleFactoryTypes.CallMethodParams<"getVestingScheduleByAddress">
    ): Promise<
      VestingScheduleFactoryTypes.CallMethodResult<"getVestingScheduleByAddress">
    > => {
      return callMethod(
        VestingScheduleFactory,
        this,
        "getVestingScheduleByAddress",
        params
      );
    },
  };

  async multicall<Calls extends VestingScheduleFactoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<VestingScheduleFactoryTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      VestingScheduleFactory,
      this,
      calls
    )) as VestingScheduleFactoryTypes.MultiCallResults<Calls>;
  }
}
