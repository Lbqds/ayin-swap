/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as StakingAccountFactoryContractJson } from "../dex/staking_account_factory.ral.json";

// Custom types for the contract
export namespace StakingAccountFactoryTypes {
  export type Fields = {
    tokenId: HexString;
    rewardTokenId: HexString;
    stakingTemplateId: HexString;
  };

  export type State = ContractState<Fields>;

  export type StakingStartedEvent = ContractEvent<{
    staker: Address;
    tokenId: HexString;
    amount: bigint;
  }>;
}

class Factory extends ContractFactory<
  StakingAccountFactoryInstance,
  StakingAccountFactoryTypes.Fields
> {
  at(address: string): StakingAccountFactoryInstance {
    return new StakingAccountFactoryInstance(address);
  }

  tests = {
    createStakingAccount: async (
      params: TestContractParams<
        StakingAccountFactoryTypes.Fields,
        { staker: Address; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createStakingAccount", params);
    },
  };
}

// Use this object to test and deploy the contract
export const StakingAccountFactory = new Factory(
  Contract.fromJson(
    StakingAccountFactoryContractJson,
    "",
    "89067700a5ba462f22956eec187b200b564de5835b33c89b9a906bc8688b43e1"
  )
);

// Use this class to interact with the blockchain
export class StakingAccountFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<StakingAccountFactoryTypes.State> {
    return fetchContractState(StakingAccountFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeStakingStartedEvent(
    options: SubscribeOptions<StakingAccountFactoryTypes.StakingStartedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      StakingAccountFactory.contract,
      this,
      options,
      "StakingStarted",
      fromCount
    );
  }
}
