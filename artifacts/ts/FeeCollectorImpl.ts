/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as FeeCollectorImplContractJson } from "../examples/fee_collector_impl.ral.json";

// Custom types for the contract
export namespace FeeCollectorImplTypes {
  export type Fields = {
    feeCollectorFactory: HexString;
    tokenPairId: HexString;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  FeeCollectorImplInstance,
  FeeCollectorImplTypes.Fields
> {
  at(address: string): FeeCollectorImplInstance {
    return new FeeCollectorImplInstance(address);
  }

  tests = {
    collectFee: async (
      params: TestContractParams<
        FeeCollectorImplTypes.Fields,
        { from: Address; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "collectFee", params);
    },
    withdraw: async (
      params: TestContractParams<
        FeeCollectorImplTypes.Fields,
        { to: Address; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
    destroy: async (
      params: TestContractParams<FeeCollectorImplTypes.Fields, { to: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const FeeCollectorImpl = new Factory(
  Contract.fromJson(
    FeeCollectorImplContractJson,
    "",
    "df433bf096917d36590d86ad4f2d2ec2ecad364bfe60a283a43f046dd938fc83"
  )
);

// Use this class to interact with the blockchain
export class FeeCollectorImplInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FeeCollectorImplTypes.State> {
    return fetchContractState(FeeCollectorImpl, this);
  }
}
