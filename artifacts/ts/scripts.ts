/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  ExecuteScriptParams,
  ExecuteScriptResult,
  Script,
  SignerProvider,
  HexString,
} from "@alephium/web3";
import { default as MintAyinScriptJson } from "../ayin/scripts/ayin/mint.ral.json";
import { default as BurnXTokenScriptJson } from "../ayin/scripts/liquid_staking/burn.ral.json";
import { default as MintXTokenScriptJson } from "../ayin/scripts/liquid_staking/mint.ral.json";
import { default as TopUpRewardsScriptJson } from "../ayin/scripts/liquid_staking/topup_rewards.ral.json";
import { default as BuyAyinScriptJson } from "../ayin/scripts/presale/buy_ayin.ral.json";
import { default as ClaimRewardsScriptJson } from "../ayin/scripts/staking/claim_rewards.ral.json";
import { default as StakeScriptJson } from "../ayin/scripts/staking/stake.ral.json";
import { default as AddLiquidityScriptJson } from "../scripts/add_liquidity.ral.json";
import { default as CreatePairScriptJson } from "../scripts/create_pair.ral.json";
import { default as RemoveLiquidityScriptJson } from "../scripts/remove_liquidity.ral.json";
import { default as SwapMaxInScriptJson } from "../scripts/swap_max_in.ral.json";
import { default as SwapMinOutScriptJson } from "../scripts/swap_min_out.ral.json";
import { default as GetTokenScriptJson } from "../test/get_token.ral.json";

export namespace MintAyin {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      ayin: HexString;
      to: Address;
      amount: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(MintAyinScriptJson);
}

export namespace BurnXToken {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      liquidStaking: HexString;
      xTokenAmount: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(BurnXTokenScriptJson);
}

export namespace MintXToken {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ liquidStaking: HexString; amount: bigint }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(MintXTokenScriptJson);
}

export namespace TopUpRewards {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ liquidStaking: HexString; amount: bigint }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(TopUpRewardsScriptJson);
}

export namespace BuyAyin {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ presale: HexString; amount: bigint }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(BuyAyinScriptJson);
}

export namespace ClaimRewards {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ staking: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(ClaimRewardsScriptJson);
}

export namespace Stake {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ staking: HexString; amount: bigint }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(StakeScriptJson);
}

export namespace AddLiquidity {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      sender: Address;
      router: HexString;
      pair: HexString;
      amount0Desired: bigint;
      amount1Desired: bigint;
      amount0Min: bigint;
      amount1Min: bigint;
      deadline: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(AddLiquidityScriptJson);
}

export namespace CreatePair {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      payer: Address;
      factory: HexString;
      alphAmount: bigint;
      tokenAId: HexString;
      tokenBId: HexString;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(CreatePairScriptJson);
}

export namespace RemoveLiquidity {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      sender: Address;
      router: HexString;
      pairId: HexString;
      liquidity: bigint;
      amount0Min: bigint;
      amount1Min: bigint;
      deadline: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(RemoveLiquidityScriptJson);
}

export namespace SwapMaxIn {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      sender: Address;
      router: HexString;
      pair: HexString;
      tokenInId: HexString;
      amountInMax: bigint;
      amountOut: bigint;
      deadline: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(SwapMaxInScriptJson);
}

export namespace SwapMinOut {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      sender: Address;
      router: HexString;
      pair: HexString;
      tokenInId: HexString;
      amountIn: bigint;
      amountOutMin: bigint;
      deadline: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(SwapMinOutScriptJson);
}

export namespace GetToken {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      token: HexString;
      sender: Address;
      amount: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(GetTokenScriptJson);
}
