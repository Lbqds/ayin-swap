/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenPairFactoryContractJson } from "../dex/token_pair_factory.ral.json";

// Custom types for the contract
export namespace TokenPairFactoryTypes {
  export type Fields = {
    pairTemplateId: HexString;
    pairSize: bigint;
    feeSetter: Address;
    feeCollectorFactory: HexString;
  };

  export type State = ContractState<Fields>;

  export type PairCreatedEvent = ContractEvent<{
    token0: HexString;
    token1: HexString;
    pair: HexString;
    currentPairSize: bigint;
  }>;

  export interface CallMethodTable {
    getFeeSetter: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  TokenPairFactoryInstance,
  TokenPairFactoryTypes.Fields
> {
  at(address: string): TokenPairFactoryInstance {
    return new TokenPairFactoryInstance(address);
  }

  tests = {
    setFeeCollectorFactory: async (
      params: TestContractParams<
        TokenPairFactoryTypes.Fields,
        { factory: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setFeeCollectorFactory", params);
    },
    updateFeeSetter: async (
      params: TestContractParams<
        TokenPairFactoryTypes.Fields,
        { newFeeSetter: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateFeeSetter", params);
    },
    getFeeSetter: async (
      params: Omit<
        TestContractParams<TokenPairFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getFeeSetter", params);
    },
    enableFeeCollector: async (
      params: TestContractParams<
        TokenPairFactoryTypes.Fields,
        { tokenPair: HexString; alphAmount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "enableFeeCollector", params);
    },
    disableFeeCollector: async (
      params: TestContractParams<
        TokenPairFactoryTypes.Fields,
        { tokenPair: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disableFeeCollector", params);
    },
    updateFeeCollector: async (
      params: TestContractParams<
        TokenPairFactoryTypes.Fields,
        { tokenPair: HexString; newFeeCollectorId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateFeeCollector", params);
    },
    sortTokens: async (
      params: TestContractParams<
        TokenPairFactoryTypes.Fields,
        { tokenA: HexString; tokenB: HexString }
      >
    ): Promise<TestContractResult<[HexString, HexString]>> => {
      return testMethod(this, "sortTokens", params);
    },
    createPair: async (
      params: TestContractParams<
        TokenPairFactoryTypes.Fields,
        {
          payer: Address;
          alphAmount: bigint;
          tokenAId: HexString;
          tokenBId: HexString;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createPair", params);
    },
  };
}

// Use this object to test and deploy the contract
export const TokenPairFactory = new Factory(
  Contract.fromJson(
    TokenPairFactoryContractJson,
    "",
    "29b02cd3e4e8549552a0acf84cc6c19f43fc1da748123897e1a053c26f38aec0"
  )
);

// Use this class to interact with the blockchain
export class TokenPairFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenPairFactoryTypes.State> {
    return fetchContractState(TokenPairFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribePairCreatedEvent(
    options: SubscribeOptions<TokenPairFactoryTypes.PairCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenPairFactory.contract,
      this,
      options,
      "PairCreated",
      fromCount
    );
  }

  methods = {
    getFeeSetter: async (
      params?: TokenPairFactoryTypes.CallMethodParams<"getFeeSetter">
    ): Promise<TokenPairFactoryTypes.CallMethodResult<"getFeeSetter">> => {
      return callMethod(
        TokenPairFactory,
        this,
        "getFeeSetter",
        params === undefined ? {} : params
      );
    },
  };

  async multicall<Calls extends TokenPairFactoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenPairFactoryTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TokenPairFactory,
      this,
      calls
    )) as TokenPairFactoryTypes.MultiCallResults<Calls>;
  }
}
