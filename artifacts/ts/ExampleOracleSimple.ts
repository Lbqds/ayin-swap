/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as ExampleOracleSimpleContractJson } from "../examples/example_oracle_simple.ral.json";

// Custom types for the contract
export namespace ExampleOracleSimpleTypes {
  export type Fields = {
    pair: HexString;
    price0CumulativeLast: bigint;
    price1CumulativeLast: bigint;
    blockTimeStampLast: bigint;
    price0Average: bigint;
    price1Average: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    fullMul: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    mulDiv: {
      params: CallContractParams<{ a: bigint; b: bigint; denominator: bigint }>;
      result: CallContractResult<bigint>;
    };
    fraction: {
      params: CallContractParams<{ numerator: bigint; denominator: bigint }>;
      result: CallContractResult<bigint>;
    };
    consult: {
      params: CallContractParams<{ tokenId: HexString; amountIn: bigint }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  ExampleOracleSimpleInstance,
  ExampleOracleSimpleTypes.Fields
> {
  at(address: string): ExampleOracleSimpleInstance {
    return new ExampleOracleSimpleInstance(address);
  }

  async testFullMulMethod(
    params: TestContractParams<
      ExampleOracleSimpleTypes.Fields,
      { x: bigint; y: bigint }
    >
  ): Promise<TestContractResult<[bigint, bigint]>> {
    return testMethod(this, "fullMul", params);
  }

  async testMulDivMethod(
    params: TestContractParams<
      ExampleOracleSimpleTypes.Fields,
      { a: bigint; b: bigint; denominator: bigint }
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "mulDiv", params);
  }

  async testFractionMethod(
    params: TestContractParams<
      ExampleOracleSimpleTypes.Fields,
      { numerator: bigint; denominator: bigint }
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "fraction", params);
  }

  async testCurrentCumulativePricesMethod(
    params: TestContractParams<
      ExampleOracleSimpleTypes.Fields,
      { currentBlockTimeStamp: bigint }
    >
  ): Promise<TestContractResult<[bigint, bigint]>> {
    return testMethod(this, "currentCumulativePrices", params);
  }

  async testUpdateMethod(
    params: Omit<
      TestContractParams<ExampleOracleSimpleTypes.Fields, never>,
      "testArgs"
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "update", params);
  }

  async testConsultMethod(
    params: TestContractParams<
      ExampleOracleSimpleTypes.Fields,
      { tokenId: HexString; amountIn: bigint }
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "consult", params);
  }
}

// Use this object to test and deploy the contract
export const ExampleOracleSimple = new Factory(
  Contract.fromJson(
    ExampleOracleSimpleContractJson,
    "",
    "902f1564daac72276ba3b6be1c18266ee300ae12c97b5169583781912d08032d"
  )
);

// Use this class to interact with the blockchain
export class ExampleOracleSimpleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ExampleOracleSimpleTypes.State> {
    return fetchContractState(ExampleOracleSimple, this);
  }

  async callFullMulMethod(
    params: ExampleOracleSimpleTypes.CallMethodParams<"fullMul">
  ): Promise<ExampleOracleSimpleTypes.CallMethodResult<"fullMul">> {
    return callMethod(ExampleOracleSimple, this, "fullMul", params);
  }

  async callMulDivMethod(
    params: ExampleOracleSimpleTypes.CallMethodParams<"mulDiv">
  ): Promise<ExampleOracleSimpleTypes.CallMethodResult<"mulDiv">> {
    return callMethod(ExampleOracleSimple, this, "mulDiv", params);
  }

  async callFractionMethod(
    params: ExampleOracleSimpleTypes.CallMethodParams<"fraction">
  ): Promise<ExampleOracleSimpleTypes.CallMethodResult<"fraction">> {
    return callMethod(ExampleOracleSimple, this, "fraction", params);
  }

  async callConsultMethod(
    params: ExampleOracleSimpleTypes.CallMethodParams<"consult">
  ): Promise<ExampleOracleSimpleTypes.CallMethodResult<"consult">> {
    return callMethod(ExampleOracleSimple, this, "consult", params);
  }

  async multicall<Calls extends ExampleOracleSimpleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<ExampleOracleSimpleTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      ExampleOracleSimple,
      this,
      calls
    )) as ExampleOracleSimpleTypes.MultiCallResults<Calls>;
  }
}
