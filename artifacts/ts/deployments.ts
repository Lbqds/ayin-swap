/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { RunScriptResult, DeployContractExecutionResult } from "@alephium/cli";
import { NetworkId } from "@alephium/web3";
import {
  TokenPair,
  TokenPairInstance,
  VestingSchedule,
  VestingScheduleInstance,
  StakingAccount,
  StakingAccountInstance,
  TokenPairFactory,
  TokenPairFactoryInstance,
  VestingScheduleFactory,
  VestingScheduleFactoryInstance,
  Router,
  RouterInstance,
  AyinToken,
  AyinTokenInstance,
  Staking,
  StakingInstance,
  LiquidStaking,
  LiquidStakingInstance,
  AyinPresale,
  AyinPresaleInstance,
} from ".";
import { default as testnetDeployments } from "../.deployments.testnet.json";
import { default as devnetDeployments } from "../.deployments.devnet.json";

export type Deployments = {
  deployerAddress: string;
  contracts: {
    TokenPair: DeployContractExecutionResult<TokenPairInstance>;
    VestingSchedule: DeployContractExecutionResult<VestingScheduleInstance>;
    StakingAccount: DeployContractExecutionResult<StakingAccountInstance>;
    TokenPairFactory: DeployContractExecutionResult<TokenPairFactoryInstance>;
    VestingScheduleFactory: DeployContractExecutionResult<VestingScheduleFactoryInstance>;
    Router: DeployContractExecutionResult<RouterInstance>;
    AyinToken: DeployContractExecutionResult<AyinTokenInstance>;
    Staking: DeployContractExecutionResult<StakingInstance>;
    LiquidStaking: DeployContractExecutionResult<LiquidStakingInstance>;
    AyinPresale: DeployContractExecutionResult<AyinPresaleInstance>;
  };
  scripts: { MintAyin: RunScriptResult; CreatePair: RunScriptResult };
};

function toDeployments(json: any): Deployments {
  const contracts = {
    TokenPair: {
      ...json.contracts.TokenPair,
      contractInstance: TokenPair.at(
        json.contracts.TokenPair.contractInstance.address
      ),
    },
    VestingSchedule: {
      ...json.contracts.VestingSchedule,
      contractInstance: VestingSchedule.at(
        json.contracts.VestingSchedule.contractInstance.address
      ),
    },
    StakingAccount: {
      ...json.contracts.StakingAccount,
      contractInstance: StakingAccount.at(
        json.contracts.StakingAccount.contractInstance.address
      ),
    },
    TokenPairFactory: {
      ...json.contracts.TokenPairFactory,
      contractInstance: TokenPairFactory.at(
        json.contracts.TokenPairFactory.contractInstance.address
      ),
    },
    VestingScheduleFactory: {
      ...json.contracts.VestingScheduleFactory,
      contractInstance: VestingScheduleFactory.at(
        json.contracts.VestingScheduleFactory.contractInstance.address
      ),
    },
    Router: {
      ...json.contracts.Router,
      contractInstance: Router.at(
        json.contracts.Router.contractInstance.address
      ),
    },
    AyinToken: {
      ...json.contracts.AyinToken,
      contractInstance: AyinToken.at(
        json.contracts.AyinToken.contractInstance.address
      ),
    },
    Staking: {
      ...json.contracts.Staking,
      contractInstance: Staking.at(
        json.contracts.Staking.contractInstance.address
      ),
    },
    LiquidStaking: {
      ...json.contracts.LiquidStaking,
      contractInstance: LiquidStaking.at(
        json.contracts.LiquidStaking.contractInstance.address
      ),
    },
    AyinPresale: {
      ...json.contracts.AyinPresale,
      contractInstance: AyinPresale.at(
        json.contracts.AyinPresale.contractInstance.address
      ),
    },
  };
  return {
    ...json,
    contracts: contracts as Deployments["contracts"],
  };
}

export function loadDeployments(
  networkId: NetworkId,
  deployerAddress?: string
): Deployments {
  const deployments =
    networkId === "testnet"
      ? testnetDeployments
      : networkId === "devnet"
      ? devnetDeployments
      : undefined;
  if (deployments === undefined) {
    throw Error("The contract has not been deployed to the " + networkId);
  }
  const allDeployments = Array.isArray(deployments)
    ? deployments
    : [deployments];
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        "The contract has been deployed multiple times on " +
          networkId +
          ", please specify the deployer address"
      );
    } else {
      return toDeployments(allDeployments[0]);
    }
  }
  const result = allDeployments.find(
    (d) => d.deployerAddress === deployerAddress
  );
  if (result === undefined) {
    throw Error("The contract deployment result does not exist");
  }
  return toDeployments(result);
}
