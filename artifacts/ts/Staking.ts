/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as StakingContractJson } from "../ayin/staking.ral.json";

// Custom types for the contract
export namespace StakingTypes {
  export type Fields = {
    tokenId: HexString;
    rewardsTokenId: HexString;
    stakingAccountTemplateId: HexString;
    rewardRate: bigint;
    totalAmountStaked: bigint;
    rewardPerTokenStored: bigint;
    lastUpdateTime: bigint;
    owner_: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    stakingAccountExists: {
      params: CallContractParams<{ staker: Address }>;
      result: CallContractResult<boolean>;
    };
    getStakingAccount: {
      params: CallContractParams<{ staker: Address }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<StakingInstance, StakingTypes.Fields> {
  at(address: string): StakingInstance {
    return new StakingInstance(address);
  }

  tests = {
    stakingAccountExists: async (
      params: TestContractParams<StakingTypes.Fields, { staker: Address }>
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "stakingAccountExists", params);
    },
    getStakingAccount: async (
      params: TestContractParams<StakingTypes.Fields, { staker: Address }>
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getStakingAccount", params);
    },
    createStakingAccount: async (
      params: TestContractParams<
        StakingTypes.Fields,
        { staker: Address; amount: bigint; rewardPerTokenPaid: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createStakingAccount", params);
    },
    onlyOwner: async (
      params: TestContractParams<StakingTypes.Fields, { caller: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "onlyOwner", params);
    },
    changeOwner: async (
      params: TestContractParams<StakingTypes.Fields, { newOwner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "changeOwner", params);
    },
    updateStakerReward: async (
      params: TestContractParams<StakingTypes.Fields, { account: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateStakerReward", params);
    },
    updateReward: async (
      params: Omit<TestContractParams<StakingTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateReward", params);
    },
    earned: async (
      params: TestContractParams<StakingTypes.Fields, { acc: HexString }>
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "earned", params);
    },
    calculateRewardPerToken: async (
      params: Omit<TestContractParams<StakingTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "calculateRewardPerToken", params);
    },
    stake: async (
      params: TestContractParams<StakingTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "stake", params);
    },
    unstake: async (
      params: TestContractParams<StakingTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "unstake", params);
    },
    claimRewards: async (
      params: Omit<TestContractParams<StakingTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "claimRewards", params);
    },
    setRewardRate: async (
      params: TestContractParams<StakingTypes.Fields, { rate: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setRewardRate", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Staking = new Factory(
  Contract.fromJson(
    StakingContractJson,
    "",
    "e0f605da74c924e60eb003a741cc2d89d3ec9fa5ecd0efa45d8f2e0431aca169"
  )
);

// Use this class to interact with the blockchain
export class StakingInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<StakingTypes.State> {
    return fetchContractState(Staking, this);
  }

  methods = {
    stakingAccountExists: async (
      params: StakingTypes.CallMethodParams<"stakingAccountExists">
    ): Promise<StakingTypes.CallMethodResult<"stakingAccountExists">> => {
      return callMethod(Staking, this, "stakingAccountExists", params);
    },
    getStakingAccount: async (
      params: StakingTypes.CallMethodParams<"getStakingAccount">
    ): Promise<StakingTypes.CallMethodResult<"getStakingAccount">> => {
      return callMethod(Staking, this, "getStakingAccount", params);
    },
  };

  async multicall<Calls extends StakingTypes.MultiCallParams>(
    calls: Calls
  ): Promise<StakingTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Staking,
      this,
      calls
    )) as StakingTypes.MultiCallResults<Calls>;
  }
}
